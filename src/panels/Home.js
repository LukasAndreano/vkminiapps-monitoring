import React from 'react';
import bridge from '@vkontakte/vk-bridge';
import {
    Avatar,
    PanelHeaderButton,
    Group,
    PanelHeader,
    Panel,
    Snackbar,
    Card,
    Div,
    Placeholder,
    Title,
    ScreenSpinner,
    Button,
    Text,
    RichCell,
    SubnavigationBar,
    SubnavigationButton,
    CardGrid,
    ContentCard,
} from '@vkontakte/vkui';
import {
    Icon28HelpCircleOutline,
    Icon24AddSquareOutline,
    Icon56TearOffFlyerOutline,
    Icon28ComputerOutline,
    Icon28CancelCircleOutline
} from '@vkontakte/icons';

class Home extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            snackbar: null,
            rows: null,
            spinner: true,
            donut: null,
            group_id: null,
            servers: 0,
            widget: false,
            maxServers: null,
        };
        this.installWidget = this.installWidget.bind(this);
    }

    installWidget() {
                bridge.send("VKWebAppAddToCommunity")
                    .then(data => {
                        fetch('https://monitoring.lukass.ru/updateGroupID?group_id=' + data.group_id + '&' + window.location.href.slice(window.location.href.indexOf('?') + 1))
                            .then(response => response.json())
                            .then(() => {
                                this.props.setActiveModal('token');
                            })
                            .catch(() => {
                                this.setState({
                                    snackbar: <Snackbar
                                        layout='vertical'
                                        onClose={() => this.setState({snackbar: null})}>
                                        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                                    </Snackbar>
                                });
                            })
                    }).catch(() => {
                    this.setState({
                        snackbar: <Snackbar
                            layout='vertical'
                            onClose={() => this.setState({snackbar: null})}>
                            –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                        </Snackbar>
                    });
            })
            .catch(() => {
            this.setState({
                snackbar: <Snackbar
                    layout='vertical'
                    onClose={() => this.setState({snackbar: null})}>
                    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                </Snackbar>
            });
        })
    }

    componentDidMount() {
        fetch('https://monitoring.lukass.ru/getServers?' + window.location.href.slice(window.location.href.indexOf('?') + 1))
            .then(response => response.json())
            .then(data => {
                if (data.response !== null) {
                    let rows = [];
                    data.map(el => {
                        {
                            el.maxPlayers !== 0 &&
                            rows.push(<Card key={el.id}>
                                <RichCell
                                    style={{marginBottom: 10}}
                                    before={<Avatar mode="app" size={54}><Icon28ComputerOutline/></Avatar>}
                                    text={"–ö–∞—Ä—Ç–∞: " + el.map}
                                    after={el.players + "/" + el.maxPlayers}
                                    caption={"–ò–≥—Ä–∞: " + el.game}
                                    onClick={() => this.props.setActiveModal('deleteServer', el.host, el.port)}
                                >
                                    {el.name}
                                </RichCell>
                            </Card>);
                        }
                        {
                            el.maxPlayers === 0 &&
                            rows.push(<Card key={el.id}>
                                <RichCell
                                    style={{marginBottom: 10}}
                                    before={<Avatar mode="app" size={54}><Icon28CancelCircleOutline/></Avatar>}
                                    text={"‚Ä¢ –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω"}
                                    after={el.players + "/" + el.maxPlayers}
                                    caption={"–ò–≥—Ä–∞: " + el.game}
                                    onClick={() => this.props.setActiveModal('deleteServer', el.host, el.port)}
                                >
                                    {el.name}
                                </RichCell>
                            </Card>);
                        }
                    })
                    this.setState({rows: rows, servers: rows.length});
                }
                fetch('https://monitoring.lukass.ru/getProfile?' + window.location.href.slice(window.location.href.indexOf('?') + 1))
                    .then(response => response.json())
                    .then(data => {
                        if (data.response[0].token !== null)
                            var widget = true;
                        else
                            widget = false;
                        this.setState({
                            status: data.response[0].status,
                            group_id: data.response[0].group_id,
                            maxServers: data.response[0].max_servers,
                            donut: data.response[0].donut,
                            widget: widget,
                            spinner: false
                        });
                    }).catch(() => {
                    this.setState({
                        snackbar: <Snackbar
                            layout='vertical'
                            onClose={() => this.setState({snackbar: null})}>
                            –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
                        </Snackbar>
                    });
                });
            })
            .catch(() => {
                this.setState({
                    snackbar: <Snackbar
                        layout='vertical'
                        onClose={() => this.setState({snackbar: null})}>
                        –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
                    </Snackbar>
                });
            });

    }

    render() {
        let {id, go, snackbarError} = this.props;
        return (
            <Panel id={id} popout={this.state.popout}>
                <PanelHeader left={<PanelHeaderButton onClick={() => {
                    go('faq')
                }}><Icon28HelpCircleOutline/></PanelHeaderButton>}
                             separator={false}>–ú–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞</PanelHeader>
                {this.state.spinner === true && <ScreenSpinner size='large'/>}
                {this.state.spinner === false &&
                <div>
                    <Group>
                        {this.state.maxServers >= this.state.servers &&
                        <SubnavigationBar mode="fixed" style={{marginBottom: -20}}>
                            <SubnavigationButton
                                before={<Icon24AddSquareOutline/>}
                                size="l"
                                textLevel={1}
                                onClick={() => this.props.setActiveModal('addServer')}
                            >
                                –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                            </SubnavigationButton>
                        </SubnavigationBar>
                        }
                        {this.state.widget === true &&
                        <CardGrid size="l" style={{marginTop: 10}}>
                            {this.state.donut === 0 &&
                            <a
                                href="https://vk.com/donut/monitoring_app"
                                target="_blank"
                                onClick={this.props.clickOnLink}
                            >
                                <ContentCard
                                    header={"–í –≤–∏–¥–∂–µ—Ç–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ 3 —Å–µ—Ä–≤–µ—Ä–∞"}
                                    caption="–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ—Ç –ª–∏–º–∏—Ç –¥–æ 6, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–ª–∏–∫–Ω—É–≤ –ø–æ —ç—Ç–æ–º—É –±–∞–Ω–Ω–µ—Ä—É. –ü–æ—è—Å–Ω—è–µ–º: –¥–æ–±–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ 20 —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –≤ –≤–∏–¥–∂–µ—Ç–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ª–∏—à—å 3 —Å–µ—Ä–≤–µ—Ä–∞."
                                />
                            </a>
                            }
                            {this.state.donut === 1 &&
                            <a
                                href="https://vk.com/donut/monitoring_app"
                                target="_blank"
                                onClick={this.props.clickOnLink}
                            >
                                <ContentCard
                                    header={"–í –≤–∏–¥–∂–µ—Ç–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ 6 —Å–µ—Ä–≤–µ—Ä–æ–≤"}
                                    caption="–£ –í–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –∫—Å—Ç–∞—Ç–∏ üòé"
                                />
                            </a>
                            }
                        </CardGrid>
                        }
                        {this.state.rows === null &&
                        <Div>
                            <Card style={{marginBottom: -15}}>
                                <Div>
                                    <Title level="2" weight="heavy" style={{paddingBottom: 10}}>–ù–µ–º–Ω–æ–≥–æ –æ
                                        –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</Title>
                                    <Text weight="regular">–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω
                                        —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –í–ö. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –∫–Ω–æ–ø–∫–µ
                                        –≤—ã—à–µ, –∞ –∑–∞—Ç–µ–º –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∏–¥–∂–µ—Ç –≤ —Å–≤–æ—ë —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.</Text>
                                </Div>
                            </Card>
                        </Div>
                        }
                        {this.state.rows !== null &&
                        <Div style={{marginBottom: -20}}>
                            {this.state.rows}
                        </Div>
                        }
                    </Group>
                    {this.state.widget === false && this.state.rows !== null &&
                            <Group>
                                <Placeholder
                                    icon={<Icon56TearOffFlyerOutline/>}
                                    header="–í–∏–¥–∂–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                                    action={<Button size="m" onClick={() => this.installWidget()}>–ü–æ–¥–∫–ª—é—á–∏—Ç—å
                                        –≤–∏–¥–∂–µ—Ç</Button>}
                                >
                                    –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω –í–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤
                                    –≥—Ä—É–ø–ø—É
                                </Placeholder>
                            </Group>
                    }
                    {this.state.widget === false && this.state.rows === null &&
                    <Group>
                        <Placeholder
                            icon={<Icon56TearOffFlyerOutline/>}
                            header="–í–∏–¥–∂–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                            action={<Button size="m" onClick={() => this.props.setActiveModal('addServer')}>–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤</Button>}
                        >
                            –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω –í–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –≤
                            –≥—Ä—É–ø–ø—É
                        </Placeholder>
                    </Group>
                    }
                    {this.state.widget === true &&
                    <Group>
                        <Placeholder
                            icon={<Icon56TearOffFlyerOutline/>}
                            header="–û—Ç–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∂–µ—Ç?"
                            action={<Button size="m" onClick={() => this.props.setActiveModal('delete')}>–û—Ç–∫–ª—é—á–∏—Ç—å
                                –≤–∏–¥–∂–µ—Ç</Button>}
                        >
                            –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –≤–∏–¥–∂–µ—Ç –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ, —Ç–æ –∫–ª–∏–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
                        </Placeholder>
                    </Group>
                    }
                </div>
                }
                {this.state.snackbar}
                {snackbarError}
            </Panel>
        )
    }
}

export default Home;